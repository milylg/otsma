(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{454:function(t,e,v){"use strict";v.r(e);var _=v(15),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h5",{attrs:{id:"注解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),v("p",[t._v("元数据，即一种描述数据的数据。Annotation是一种应用于类、方法、参数、变量、构造器及包声明中的特殊修饰符。它是一种由JSR-175标准选择用来描述元数据的一种工具。用于对代码进行规范约束，也有助于阅读程序。通俗的说，注解是代码的标签，对代码中的类，方法，属性进行标记。")]),t._v(" "),v("p",[t._v("官方定义:注解是一系列元数据，它提供数据用来解释程序代码，但是注解并非是所解释的代码本身的一部分。注解对于代码的运行效果没有直接影响。")]),t._v(" "),v("h5",{attrs:{id:"注解的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注解的作用"}},[t._v("#")]),t._v(" 注解的作用")]),t._v(" "),v("ul",[v("li",[t._v("提供信息给编译器： 编译器可以利用注解来探测错误和警告信息")]),t._v(" "),v("li",[t._v("编译阶段时的处理： 软件工具可以用来利用注解信息来生成代码、Html文档或者做其它相应处理。")]),t._v(" "),v("li",[t._v("运行时的处理： 某些注解可以在程序运行的时候接受代码的提取")])]),t._v(" "),v("h5",{attrs:{id:"自定义注解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义注解"}},[t._v("#")]),t._v(" 自定义注解")]),t._v(" "),v("p",[t._v("java中提供了四种注解用于创建自定义的注解")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("注解")]),t._v(" "),v("th",[t._v("作用")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("@Target")]),t._v(" "),v("td",[t._v("注解用于在什么地方")])]),t._v(" "),v("tr",[v("td",[t._v("@Retention")]),t._v(" "),v("td",[t._v("需要在什么级别保存该注解信息")])]),t._v(" "),v("tr",[v("td",[t._v("@Document")]),t._v(" "),v("td",[t._v("将注解包含在Javadoc中")])]),t._v(" "),v("tr",[v("td",[t._v("@Inherited")]),t._v(" "),v("td",[t._v("允许子类继承父类中的注解")])])])]),t._v(" "),v("h5",{attrs:{id:"target"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#target"}},[t._v("#")]),t._v(" @Target")]),t._v(" "),v("ul",[v("li",[t._v("ElementType.ANNOTATION_TYPE 可以给一个注解进行注解")]),t._v(" "),v("li",[t._v("ElementType.CONSTRUCTOR 可以给构造方法进行注解")]),t._v(" "),v("li",[t._v("ElementType.FIELD 可以给属性进行注解")]),t._v(" "),v("li",[t._v("ElementType.LOCAL_VARIABLE 可以给局部变量进行注解")]),t._v(" "),v("li",[t._v("ElementType.METHOD 可以给方法进行注解")]),t._v(" "),v("li",[t._v("ElementType.PACKAGE 可以给一个包进行注解")]),t._v(" "),v("li",[t._v("ElementType.PARAMETER 可以给一个方法内的参数进行注解")]),t._v(" "),v("li",[t._v("ElementType.TYPE 可以给一个"),v("code",[t._v("类")]),t._v("型进行注解，比如类、接口、枚举")])]),t._v(" "),v("h5",{attrs:{id:"retention"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#retention"}},[t._v("#")]),t._v(" @Retention")]),t._v(" "),v("ul",[v("li",[t._v("RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽略")]),t._v(" "),v("li",[t._v("RetentionPolicy.CLASS 注解只被保留到编译阶段，它并不会被加载到 JVM 中。")]),t._v(" "),v("li",[t._v("RetentionPolicy.RUNTIME 注解可以保留到程序运行阶段，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。")])]),t._v(" "),v("h5",{attrs:{id:"注解的应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注解的应用"}},[t._v("#")]),t._v(" 注解的应用")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("使用反射的方式")])]),t._v(" "),v("li",[v("p",[t._v("SpringMVC中大量使用了注解和反射的方式")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);