(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{460:function(s,t,a){"use strict";a.r(t);var n=a(15),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h4",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" "),a("strong",[s._v("题目描述")])]),s._v(" "),a("p",[s._v("题目：写一个函数，求两个整数之和，要求在函数体内不得使用＋、－、×、÷四则运算符号。")]),s._v(" "),a("h4",{attrs:{id:"测试用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试用例"}},[s._v("#")]),s._v(" "),a("strong",[s._v("测试用例")])]),s._v(" "),a("ul",[a("li",[s._v("输入都是正整数")]),s._v(" "),a("li",[s._v("输入正整数和负整数，负整数绝对值小于正整数")]),s._v(" "),a("li",[s._v("输入正整数和负整数，负整数绝对值大于正整数")]),s._v(" "),a("li",[s._v("输入一对相反数")])]),s._v(" "),a("h4",{attrs:{id:"我的解决方案-不完全正确"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我的解决方案-不完全正确"}},[s._v("#")]),s._v(" "),a("strong",[s._v("我的解决方案（不完全正确）")])]),s._v(" "),a("p",[s._v("代码仅仅只能处理正数相加的问题域，不能处理负数，因此，并不能使所有测试通过。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addByBit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" carry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" indexOfBit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" bitOfA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bitOfB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" indexOfBit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" indexOfBit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" carry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        bitOfA "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" indexOfBit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        bitOfB "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" indexOfBit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bitOfA "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" bitOfB "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" carry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" indexOfBit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        carry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" carry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" bitOfA "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" bitOfB "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" bitOfA "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" bitOfB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        indexOfBit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h4",{attrs:{id:"正确的解答思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确的解答思路"}},[s._v("#")]),s._v(" "),a("strong",[s._v("正确的解答思路")])]),s._v(" "),a("p",[s._v("Key words:")]),s._v(" "),a("ul",[a("li",[s._v("进位")]),s._v(" "),a("li",[s._v("非进位和：当前位相加，只取一位低位，进位舍弃，也就是暂不处理进位值。")])]),s._v(" "),a("p",[s._v("For Example:")]),s._v(" "),a("p",[a("code",[s._v("1750 + 2365 = ?")])]),s._v(" "),a("p",[a("strong",[s._v("非进位和为：3015")])]),s._v(" "),a("p",[s._v("​      1 7 5 0")]),s._v(" "),a("p",[s._v("​      2 3 6 5")]),s._v(" "),a("p",[s._v("​      "),a("strong",[s._v("3 0 1 5")])]),s._v(" "),a("p",[a("strong",[s._v("进位为：1100")])]),s._v(" "),a("p",[s._v("​      1 7 5 0")]),s._v(" "),a("p",[s._v("​      2 3 6 5")]),s._v(" "),a("p",[s._v("​      "),a("strong",[s._v("1 1 0 0")])]),s._v(" "),a("p",[s._v("此时，"),a("code",[s._v("1750 + 2365")]),s._v("转换为了"),a("code",[s._v("3015 + 1100")]),s._v("，进行下一个上述逻辑运算")]),s._v(" "),a("p",[s._v("结束条件为进位为"),a("code",[s._v("0")]),s._v("时，整个运算过程结束。")]),s._v(" "),a("p",[s._v("现在将"),a("code",[s._v("十进制")]),s._v("的运算逻辑迁移到"),a("code",[s._v("二进制")]),s._v("的运算逻辑中。")]),s._v(" "),a("p",[s._v("For Example：")]),s._v(" "),a("p",[a("code",[s._v("15 + 17 = ?")]),s._v("  两个数字使用 "),a("strong",[s._v("numberOne")]),s._v("， "),a("strong",[s._v("numberTwo")]),s._v(" 进行标识")]),s._v(" "),a("p",[a("strong",[s._v("非进位和为： 1 1 1 1 0")]),s._v("    使用"),a("code",[s._v("sum")]),s._v(" 标识")]),s._v(" "),a("p",[s._v("​    0 1 1 1 1")]),s._v(" "),a("p",[s._v("​    1 0 0 0 1")]),s._v(" "),a("p",[s._v("​    "),a("strong",[s._v("1 1 1 1 0")])]),s._v(" "),a("p",[s._v("可以用运算符表示为  "),a("code",[s._v("1 1 1 1 ^ 1 0 0 0 1")]),s._v("  即 "),a("strong",[a("code",[s._v("sum")]),s._v(" = numberOne ^ numberTwo")])]),s._v(" "),a("p",[a("strong",[s._v("进位为：1 0")]),s._v("  使用"),a("code",[s._v("carry")]),s._v(" 标识")]),s._v(" "),a("p",[s._v("​    0 1 1 1 1")]),s._v(" "),a("p",[s._v("​    1 0 0 0 1")]),s._v(" "),a("p",[s._v("​    "),a("strong",[s._v("0 0 0 1 0")])]),s._v(" "),a("p",[s._v("可以用运算符表示为  "),a("code",[s._v("(1 1 1 1 & 1 0 0 0 1) << 1")]),s._v("  即 "),a("strong",[a("code",[s._v("carry")]),s._v(" = (numberOne & numberTwo) << 1")])]),s._v(" "),a("p",[a("strong",[s._v("此时进位"),a("code",[s._v("carry")]),s._v("并没有置为零（继续逻辑运算的条件）")]),s._v("，所以接下来，需要进行下一轮逻辑运算，")]),s._v(" "),a("p",[a("code",[s._v("(1 1 1 1 + 1 0 0 0 1)")]),s._v(" 转变成了"),a("code",[s._v("(1 1 1 1 0 + 1 0)")]),s._v("的加法运算")]),s._v(" "),a("p",[s._v("在进行下一轮逻辑运算之前需要更新 "),a("strong",[s._v("numberOne")]),s._v(" 和 "),a("strong",[s._v("numberTwo")]),s._v(" 的值")]),s._v(" "),a("p",[s._v("即")]),s._v(" "),a("p",[s._v("​      "),a("strong",[s._v("numberOne  = sum")])]),s._v(" "),a("p",[s._v("​      "),a("strong",[s._v("numberTwo  = carry")])]),s._v(" "),a("p",[s._v("现在，继续下一次逻辑运算，直至"),a("code",[s._v("carry = 0")]),s._v(" 时，获取结果。")]),s._v(" "),a("p",[s._v("将代码翻译上述逻辑处理流程，如下：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" carry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        carry "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" carry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h4",{attrs:{id:"思想的升华"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思想的升华"}},[s._v("#")]),s._v(" "),a("strong",[s._v("思想的升华")])]),s._v(" "),a("p",[s._v("为什么我自己的逻辑处理不能够处理负数，而上述的十进制运算逻辑迁移却可以应用到二进制中？")]),s._v(" "),a("p",[s._v("首先，我的处理方式也是从十进制的加法逻辑中迁移出来并应用到二进制的加法逻辑运算中，在这一点上我的思考方式与正确的思考方式是一致的。")]),s._v(" "),a("p",[s._v("现在我能够看出是我的思考的角度与有效的处理方式是不同的，我按照1bit位1bit位的计算，而有效的解答所处理的是将一个数字作为一个整体来处理的。我知道这是我们的思考维度的不同，而我不知道的是为什么这种方式可以处理负数，造成这种差异的原因是什么？")]),s._v(" "),a("p",[s._v("我使用bit位进行运算，忽略了"),a("strong",[s._v("正数和负数相加")]),s._v("以及"),a("strong",[s._v("非正数之间的相加")]),s._v("，忽略了这些问题，会导致运算出现死循环的问题（在我的解决方法的代码上）。在计算机底层，CPU只会加法，所有的操作符运算都可以使用加法来转换。计算机科学家为了处理上述的问题，又提出了两个概念------反码和补码。这些概念早已封装在计算机系统的底层中。")]),s._v(" "),a("p",[a("strong",[s._v("概念提要")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("反码解决了正负数相加的问题")])]),s._v(" "),a("li",[a("p",[s._v("补码解决了+0 和 -0的问题")])])]),s._v(" "),a("p",[a("code",[s._v("原码")]),s._v("当一个数占8bit的空间，低7位标识为数值，最高位为符号位，0为正数，1为负数。表达范围为**[-127, 127]**")]),s._v(" "),a("p",[a("code",[s._v("反码")]),s._v("基于原码计算得来的，正数的反码是它本身。但负数的反码是其原码的非符号位取反后的结果")]),s._v(" "),a("p",[a("code",[s._v("补码")]),s._v("是基于原码和反码派生出来的，正数的补码是它本身，负数的补码是它的反码加上1的结果，表达范围**[-128,127]**")]),s._v(" "),a("p",[s._v("For Example :   "),a("strong",[s._v("-14")]),s._v("      原码("),a("strong",[s._v("1000 1100")]),s._v(")    反码("),a("strong",[s._v("1111 0011")]),s._v(")   补码("),a("strong",[s._v("1111 0100")]),s._v(")")]),s._v(" "),a("p",[a("strong",[s._v("运算方式")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("反码")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("符号位与数值一起参加运算")])]),s._v(" "),a("li",[a("p",[s._v("反码的符号位相加后，如果有进位出现，则要把它与结果的最低位相加")])]),s._v(" "),a("li",[a("p",[s._v("用反码进行运算，结果也是反码，对于结果是正数来说，反码就是它本身，如果是负数，则要将非符号位的位进行取反，才是其结果的原码。")])])])]),s._v(" "),a("li",[a("p",[s._v("补码")]),s._v(" "),a("ul",[a("li",[s._v("符号位与数值一起参加运算")]),s._v(" "),a("li",[s._v("补码的符号位相加后，如果有进位出现，则要把进位舍弃")]),s._v(" "),a("li",[s._v("用补码进行运算，结果也是补码，对于结果是正数来说，补码就是它本身，如果是负数，则要将该补码再进行一次求补码的操作，才是其结果的原码。")])])])]),s._v(" "),a("p",[s._v("计算机最终会选择补码进行存储和计算数字，这样做的优点如下:")]),s._v(" "),a("ul",[a("li",[s._v("便于CPU统一使用加法运算器进行计算")]),s._v(" "),a("li",[s._v("解决+0和-0的表达方式")]),s._v(" "),a("li",[s._v("数字范围扩大成[-128, 127]")])]),s._v(" "),a("p",[s._v("如果想让我的解决方式可以通过测试，那么还需要处理负数是的转换逻辑运算。这种方式处理起来比较麻烦，因此，如果感到实现方式比较繁琐，可能是我的思考角度不合适造成的。一个合适的思考维度，可以很大的降低代码的复杂度。")]),s._v(" "),a("p",[s._v("思维的迁移能力很重要!")])])}),[],!1,null,null,null);t.default=r.exports}}]);